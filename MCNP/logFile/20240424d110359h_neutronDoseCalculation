*****Load pre-defined HU conversion properties and MCNP cross sections from conversionCT2tissue.mat.Note: Modification of conversionCT2tissue.mat using generateVar_conversionCT2tissue.m.**********Properties from (scaled) HU loaded are: Minimum value: -1024 and Maximum value: 0.[Warning: No information on rescale slope and/or intercept provided in DICOM data. Calculation might crash...] 
Please use question dialog to decide how to convert to scaled HU.**********You decided not to use DICOM rescale slope and intercept.**********Properties from rescaled HU are: Minimum value: 0 and Maximum value: 1000.*****Material types are assigned using the following HU intervals...air: 0 to 50lung: 50 to 830softTissue: 830 to 1280bone: 1280 to 5000*****Segmentation via HU intervals led to zero voxels with lung tissue.
*****
Skin thickness has been set to: 1 mm.
*****
*****
In case you wish to simulate BNCT irradiation make sure the PTV is called PTV_BNCT.
*****
Checking for PTV...
*****
No PTV for BNCT detected.
*****
Segmentation process performed sucessfully.
*****Calculate density from CT data with density given in [g/cm^3]********Neutron spectrum load from machine file.
***
Gamma/photon spectrum found in neutron machine. Will be included in the simulation as primary particles.
***
*****
Tally type: TMESH3...
*****
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_bixelDoseCalculatorMCNP.m',25,1)">25  </a>if this.MCNPinstallationCheck && ~this.externalCalculation
this.externalCalculation = true

this = 

[Warning: DEPRECATION WARNING: Property 'relDoseCutOff' of Dose Engine 'MCNP' is deprecated! Use Property 'relativeDosimetricCutOff' instead!] 
  <a href="matlab:helpPopup DoseEngines.matRad_NeutronMCNPEngine" style="font-weight:bold">matRad_NeutronMCNPEngine</a> with properties:

      possibleRadiationModes: {'neutrons'}
                        name: 'MCNP'
                   shortName: 'MCNP'
                      config: [1×1 matRad_MCNPConfig]
         externalCalculation: 1
           calcRMFparameters: 0
       MCNPinstallationCheck: 1
                  MCNPFolder: 'D:\GitHub\matRad_Lucas\MCNP'
                  currFolder: 'D:\GitHub\matRad_Lucas\MCNP\runfiles_tmp'
                 constantRBE: NaN
      numHistoriesPerBeamlet: 20000
          numHistoriesDirect: 1000000
            outputMCvariance: 1
    relativeDosimetricCutOff: 0.9950
               relDoseCutOff: 0.0050
                    doseGrid: [1×1 struct]
                    multScen: [1×1 matRad_NominalScenario]
                  voxelSubIx: []
     selectVoxelsInScenarios: 'all'
                    bioParam: [1×1 matRad_BiologicalModel]
                     machine: [1×1 struct]
                      timers: [1×1 struct]
             numOfColumnsDij: 1
                yCoordsV_vox: [531441×1 double]
                xCoordsV_vox: [531441×1 double]
                zCoordsV_vox: [531441×1 double]
        yCoordsV_voxDoseGrid: [110592×1 double]
        xCoordsV_voxDoseGrid: [110592×1 double]
        zCoordsV_voxDoseGrid: [110592×1 double]
                     VctGrid: [531441×1 double]
                   VdoseGrid: [110592×1 double]
                 VctGridMask: [4096000×1 logical]
               VdoseGridMask: [884736×1 logical]
          robustVoxelsOnGrid: {[884736×1 logical]}
                isDoseEngine: 1
                    hWaitbar: [1×1 Figure]

if system_dependent('IsDebugMode')==1, dbcont; end
Please use question dialog to continue after finishing external calculations.
*****
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_evaluateTallyMCNP.m',29,1)">29  </a>for counterBeam = 1:dij.numOfBeams
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_evaluateTallyMCNP.m',38,1)">38  </a>        matRad_cfg.dispInfo('*****\n')
if system_dependent('IsDebugMode')==1, dbstep; end
*****
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_evaluateTallyMCNP.m',39,1)">39  </a>        matRad_cfg.dispInfo('Evaluate Tally Data.\n')
if system_dependent('IsDebugMode')==1, dbstep; end
Evaluate Tally Data.
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_evaluateTallyMCNP.m',40,1)">40  </a>        matRad_cfg.dispInfo('*****\n')
if system_dependent('IsDebugMode')==1, dbstep; end
*****
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_evaluateTallyMCNP.m',41,1)">41  </a>        tic;
if system_dependent('IsDebugMode')==1, dbstep; end
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\MCNP\matRad_evaluateTallyMCNP.m',44,1)">44  </a>        resultMCNP = matRad_readDataFromText_TMESHvBioOpti(tallyDataList(counterDijColumns).name, 'TMESH3', 2);
        resultMCNP = matRad_readDataFromText_TMESHvBioOpti(tallyDataList(counterDijColumns).name, 'TMESH3', 2);
No MCNP tally for RBE calculation.
Data output given in two columns.
if system_dependent('IsDebugMode')==1, dbstep; end
No MCNP tally for RBE calculation.
Data output given in two columns.
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
Reading out tally data took: 41.2795 seconds.
        dij.doseMatrixBixel(counterDijColumns).physicalDose_relError{1} = ...
            sparse(find(doseMatrixBixel.physicalDose_relError),1,doseMatrixBixel.physicalDose_relError(doseMatrixBixel.physicalDose_relError~=0),dij.doseGrid.numOfVoxels,1);
        % Store total dose from TMESH tally
        dij.physicalDose{1}(:,counterDijColumns) = ...
            sparse(find(doseMatrixBixel.physicalDose), 1, doseMatrixBixel.physicalDose(doseMatrixBixel.physicalDose~=0), dij.doseGrid.numOfVoxels,1);
        for counterRTStruct=1:size(cst,1)
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).name = cst{counterRTStruct,2};
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).bixelNumber = counterDijColumns;
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).meanError = mean(doseMatrixBixel.physicalDose_relError(cst{counterRTStruct,4}{1}));
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).maxError = max(doseMatrixBixel.physicalDose_relError(cst{counterRTStruct,4}{1}));
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).medianError = median(doseMatrixBixel.physicalDose_relError(cst{counterRTStruct,4}{1}));
        end
{Index exceeds the number of array elements. Index must not exceed 884736.
} 
counterRTStruct

counterRTStruct =

     1

            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).name = cst{counterRTStruct,2};
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).bixelNumber = counterDijColumns;
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).meanError = mean(doseMatrixBixel.physicalDose_relError(cst{counterRTStruct,4}{1}));
{Index exceeds the number of array elements. Index must not exceed 884736.
} 
dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).meanError = mean(doseMatrixBixel.physicalDose_relError(ct.doseGridCT.tissueBin.linIndVol{counterRTStruct,4}{1}));
{Intermediate dot '.' indexing produced a comma-separated list with 6 values, but it must produce a single value when followed by subsequent indexing operations.

<a href="matlab:helpview('matlab','error_index_expected_one_output_from_intermediate_indexing')" style="font-weight:bold">Related documentation</a>
} 
dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).meanError = mean(doseMatrixBixel.physicalDose_relError(ct.doseGridCT.tissueBin(counterRTStruct).linIndVol));

        % Save relative error for each radiotherapy structure and bixel
        for counterRTStruct=1:size(cst,1)
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).name = cst{counterRTStruct,2};
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).bixelNumber = counterDijColumns;
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).meanError = mean(doseMatrixBixel.physicalDose_relError(ct.doseGridCT.tissueBin(counterRTStruct).linIndVol));
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).maxError = max(doseMatrixBixel.physicalDose_relError(ct.doseGridCT.tissueBin(counterRTStruct).linIndVol));
            dij.relError_radioTherpyStruct(counterRTStruct,counterDijColumns).medianError = median(doseMatrixBixel.physicalDose_relError(ct.doseGridCT.tissueBin(counterRTStruct).linIndVol));
        end
if system_dependent('IsDebugMode')==1, dbcont; end
*****
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matRad_Widget/showError')" style="font-weight:bold">matRad_Widget/showError</a>
CalcDoseCallback: Error in dose calculation!Index exceeds the number of array elements. Index must not exceed 884736.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matRad_WorkflowWidget/btnCalcDose_Callback', 'matRad_WorkflowWidget.m', 410)" style="font-weight:bold">matRad_WorkflowWidget/btnCalcDose_Callback</a> (<a href="matlab: opentoline('matRad_WorkflowWidget.m',410,0)">line 410</a>)

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matRad_WorkflowWidget>@(hObject,eventdata)btnCalcDose_Callback(this,hObject,eventdata)', 'matRad_WorkflowWidget.m', 158)" style="font-weight:bold">matRad_WorkflowWidget>@(hObject,eventdata)btnCalcDose_Callback(this,hObject,eventdata)</a> (<a href="matlab: opentoline('matRad_WorkflowWidget.m',158,0)">line 158</a>)
} 
Error while evaluating UIControl Callback.

matRad: Generating stf struct...
<a href="matlab: opentoline('D:\GitHub\matRad_Lucas\matRad_generateStf.m',73,1)">73  </a>fileName = [pln.radiationMode '_' pln.machine];
addmarginBool = false

addmarginBool =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0

if system_dependent('IsDebugMode')==1, dbcont; end
[Warning: Could not find HLUT  in hlutLibrary folder. matRad default HLUT loaded] 
No book keeping for neutron energies.Progress: 100.00 %
Dose influence matrix calculation using  'MCNP' Dose Engine...
Dose grid has dimensions 96x96x96
Adjusting structures for overlap... Done!
Resampling structure set... Done!
Adjusting structures for overlap... Done!
Resampling structure set... Done!
